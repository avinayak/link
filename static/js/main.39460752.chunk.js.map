{"version":3,"sources":["SolarSailer.js","config.js","db.js","Chat.js","Versus.js","App.js","serviceWorker.js","index.js"],"names":["sketch","p","width","height","lastx","lasty","setup","window","innerWidth","createCanvas","WEBGL","background","myCustomRedrawAccordingToNewPropsHandler","props","sendDragged","rx","ry","mouseDragged","noStroke","ellipse","mouseX","mouseY","draw","translate","rect","SolarSailer","state","x","y","this","dataChannel","addEventListener","event","setState","JSON","parse","data","stringify","send","Component","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firebase","initializeApp","firestore","setGuestSdp","guestSdp","key","collection","doc","set","merge","then","console","log","catch","error","Chat","handleChange","roomcode","target","value","handleClick","toUpperCase","onSnapshot","sdps","wtfRtc","iceServers","urls","consumeOffer","hostSdp","consumeResult","sdp","getOpenDataChannel","saveDataChannel","type","onChange","onClick","Versus","rtcOffer","offerResult","roomKey","Math","random","toString","slice","substring","rtc","createOffer","ordered","answer","answerResult","Fragment","style","textAlign","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","App","classes","CssBaseline","AppBar","position","Toolbar","IconButton","edge","className","color","aria-label","Typography","variant","Button","Container","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39460752.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport P5Wrapper from \"react-p5-wrapper\";\r\n\r\nfunction sketch(p) {\r\n  let rotation = 0;\r\n  let width = 0;\r\n  let height = 0;\r\n  let lastx = 0;\r\n  let lasty = 0;\r\n\r\n  p.setup = function() {\r\n    //console.log(window.innerWidth - 30);\r\n    \r\n    width = window.innerWidth - 30 < 536 ? window.innerWidth - 30 : 536;\r\n    height = width;\r\n    p.createCanvas(width, width, p.WEBGL);\r\n    p.background(4);\r\n  };\r\n\r\n  p.myCustomRedrawAccordingToNewPropsHandler = (props) => {\r\n    p.sendDragged = props.sendDragged;\r\n    if(props.rx != lastx || props.ry != lasty) {\r\n      lastx = props.rx;\r\n      lasty = props.ry;\r\n    }\r\n  };\r\n\r\n  p.mouseDragged = function(props) {\r\n    p.noStroke();\r\n    p.ellipse(p.mouseX, p.mouseY, 2);\r\n    p.sendDragged(p.mouseX, p.mouseY);\r\n  };\r\n  var i = 0;\r\n  p.draw = function() {\r\n    p.noStroke();\r\n    p.translate(-width / 2, -height / 2);\r\n    p.ellipse(lastx, lasty, 2);\r\n    i += 1;\r\n    p.rect(5, 5 * 2, 1, 1);\r\n  };\r\n}\r\n\r\nexport class SolarSailer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x:0,\r\n      y:0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dataChannel.addEventListener(\"message\", event => {\r\n      this.setState(JSON.parse(event.data))\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <br />\r\n        {JSON.stringify(this.state)}\r\n        <P5Wrapper sketch={sketch} rx={this.state.x} ry={this.state.y} sendDragged={(x, y) => {\r\n          this.props.dataChannel.send(JSON.stringify({x,y}))\r\n        }} />\r\n        Latency Test 1\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SolarSailer;\r\n","var config = {\r\n  apiKey: \"AIzaSyDGBsWu_dwvGW3TGXZswEMR4X2PNhStaA4\",\r\n  authDomain: \"solar-sailer.firebaseapp.com\",\r\n  databaseURL: \"https://solar-sailer.firebaseio.com\",\r\n  projectId: \"solar-sailer\",\r\n  storageBucket: \"solar-sailer.appspot.com\",\r\n  messagingSenderId: \"23628532125\",\r\n  appId: \"1:23628532125:web:f48762f23514163d940774\"\r\n};\r\n\r\nexport default config;\r\n","import firebase from \"firebase\";\r\nimport config from './config'\r\n\r\nconst firebaseApp = firebase.initializeApp(config);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nlet setGuestSdp = (guestSdp, key) => {\r\n    db.collection(\"live\")\r\n      .doc(key)\r\n      .set(\r\n        {\r\n          guestSdp\r\n        },\r\n        { merge: true }\r\n      )\r\n      .then(function() {\r\n        console.log(\"guestSdp successfully written!\");\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n\r\n  let setHostSdp = (hostSdp, key) => {\r\n    db.collection(\"live\")\r\n      .doc(key)\r\n      .set({\r\n        hostSdp\r\n      })\r\n      .then(function() {\r\n        console.log(\"hostSdp successfully written!\");\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n  };\r\n  \r\n\r\n  export { db, setGuestSdp, setHostSdp };\r\n","import React, { Component } from \"react\";\r\nimport { db, setGuestSdp } from \"./db\";\r\nimport wtfRtc from \"wtf-rtc\";\r\n\r\nexport class Chat extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      roomcode: \"\"\r\n    };\r\n  }\r\n  handleChange = event => {\r\n    this.setState({ roomcode: event.target.value });\r\n  };\r\n  handleClick = () => {\r\n    db.collection(\"live\")\r\n      .doc(this.state.roomcode.toUpperCase())\r\n      .onSnapshot(doc => {\r\n        // console.log(rtcOffer);\r\n        console.log(\"Current data \", doc.data());\r\n        var sdps = doc.data();\r\n        console.log(sdps);\r\n        if (sdps && \"hostSdp\" in sdps && !(\"guestSdp\" in sdps)) {\r\n          var rtc = wtfRtc(\"solarsailer\", {\r\n            iceServers: [\r\n              { urls: \"stun:stun.l.google.com:19302\" },\r\n              { urls: \"stun:stun1.l.google.com:19302\" },\r\n              { urls: \"stun:stun2.l.google.com:19302\" },\r\n              { urls: \"stun:stun3.l.google.com:19302\" },\r\n              { urls: \"stun:stun4.l.google.com:19302\" },\r\n              { urls: \"stun:stun.voxgratia.org\" }\r\n            ]\r\n          });\r\n          rtc.consumeOffer(sdps.hostSdp, (error, consumeResult) => {\r\n            setGuestSdp(consumeResult.sdp, this.state.roomcode);\r\n            console.log(\"consumeResult\", error, consumeResult);\r\n            consumeResult.getOpenDataChannel((error, dataChannel) => {\r\n              console.log(error, dataChannel);\r\n              this.props.saveDataChannel(dataChannel);\r\n            });\r\n          });\r\n        }\r\n      });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.roomcode}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button onClick={this.handleClick}>JOIN</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React, { Component } from \"react\";\r\nimport SolarSailer from \"./SolarSailer\";\r\nimport Chat from \"./Chat\";\r\nimport wtfRtc from \"wtf-rtc\";\r\nimport { db, setHostSdp } from \"./db\";\r\n\r\nexport class Versus extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sdp: null,\r\n      dataChannel: null,\r\n      offerResult: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    var roomKey = Math.random()\r\n      .toString(36)\r\n      .slice(2)\r\n      .substring(0, 5)\r\n      .toUpperCase();\r\n    var rtc = wtfRtc(\"solarsailer\", {\r\n      iceServers: [\r\n        { urls: \"stun:stun.l.google.com:19302\" },\r\n        { urls: \"stun:stun1.l.google.com:19302\" },\r\n        { urls: \"stun:stun2.l.google.com:19302\" },\r\n        { urls: \"stun:stun3.l.google.com:19302\" },\r\n        { urls: \"stun:stun4.l.google.com:19302\" },\r\n        { urls: \"stun:stun.voxgratia.org\" }\r\n      ]\r\n    });\r\n\r\n    if (this.state.sdp == null) {\r\n      rtc.createOffer({ ordered: false }, (error, offerResult) => {\r\n        console.log(offerResult.sdp);\r\n        setHostSdp(offerResult.sdp, roomKey);\r\n        this.setState({ sdp: offerResult.sdp, offerResult, roomKey });\r\n      });\r\n    }\r\n\r\n    db.collection(\"live\")\r\n      .doc(roomKey)\r\n      .onSnapshot(doc => {\r\n        console.log(\"App data \", doc.data());\r\n        var sdps = doc.data();\r\n        if (sdps && \"guestSdp\" in sdps) {\r\n          console.log(sdps.guestSdp);\r\n          this.state.offerResult.answer(\r\n            sdps.guestSdp,\r\n            (error, answerResult) => {\r\n              console.log(\"answerResult\", error, answerResult);\r\n              if (answerResult)\r\n                answerResult.getOpenDataChannel((error, dataChannel) => {\r\n                  console.log(\"in producer data channel\");\r\n                  console.log(error, dataChannel);\r\n                  dataChannel.send(\"hello\");\r\n                  this.setState({ dataChannel });\r\n                });\r\n            }\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  rtcOffer = null;\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.dataChannel == null && (\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <br />\r\n            <br />\r\n            Share this code:<b>{this.state.roomKey}</b>\r\n            <br />\r\n            <small> or</small>\r\n            <Chat\r\n              sdp={this.state.sdp}\r\n              saveDataChannel={dataChannel => {\r\n                this.setState({ dataChannel });\r\n              }}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {this.state.dataChannel && (\r\n          <SolarSailer dataChannel={this.state.dataChannel} />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Versus;\r\n","import React, { useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Container from \"@material-ui/core/Container\";\nimport Versus from './Versus';\n\n\nimport \"./App.css\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Link\n          </Typography>\n          <Button color=\"inherit\">Login</Button>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"sm\">\n        <Versus/>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}